/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package comments;

import java.io.IOException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.bluetooth.BluetoothStateException;
import javax.bluetooth.DeviceClass;
import javax.bluetooth.DiscoveryAgent;
import javax.bluetooth.DiscoveryListener;
import javax.bluetooth.LocalDevice;
import javax.bluetooth.RemoteDevice;
import javax.bluetooth.ServiceRecord;
import javax.bluetooth.UUID;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author wangjie
 */
interface OnClickResult {

    void onClickItem(RemoteDevice device, Vector<ServiceRecord> services);
}

public class DeviceList extends javax.swing.JFrame implements DiscoveryListener {

    /**
     * Local bluetooth device.
     */
    private LocalDevice local;
    private OnClickResult linster;

    public void setLinster(OnClickResult linster) {
        this.linster = linster;
    }
    private Vector<RemoteDevice> devices;
    private Vector<ServiceRecord> services;
    private Vector<String> devicesTitle;

    /**
     * Creates new form DeviceList
     */
    public DeviceList() {
        initComponents();
    }

    public DeviceList(LocalDevice local) {
        this.local = local;
        devices = new Vector<RemoteDevice>();
        services = new Vector<ServiceRecord>();
        devicesTitle = new Vector<String>();
        initComponents();
//        SwingUtilities.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                findDevice();
//
//            }
//        });
        findDevice();
    }

    void findDevice() {
        
        
        try {
            local.getDiscoveryAgent().startInquiry(DiscoveryAgent.GIAC, this);
        } catch (BluetoothStateException ex) {
            Logger.getLogger(DeviceList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listDevice = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listDevice.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listDeviceValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listDevice);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listDeviceValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listDeviceValueChanged
        // TODO add your handling code here:
        if (linster != null && devices.size() > 0) {
            //linster.onClickItem(devices.get(listDevice.getSelectedIndex()));
            findService(devices.get(listDevice.getSelectedIndex()));
        }
    }//GEN-LAST:event_listDeviceValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeviceList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeviceList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeviceList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeviceList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeviceList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listDevice;
    // End of variables declaration//GEN-END:variables

    @Override
    public void deviceDiscovered(RemoteDevice rd, DeviceClass dc) {
        MessagerBoxShow("deviceDiscovered");
        devices.add(rd);
        devicesTitle.add(getDeviceStr(rd));
        listDevice.setListData(devicesTitle);
    }

    @Override
    public void servicesDiscovered(int i, ServiceRecord[] srs) {
        MessagerBoxShow("servicesDiscovered" + i + "---" + srs.length);
        for (ServiceRecord x : srs) {
            services.add(x);
        }

    }

    @Override
    public void serviceSearchCompleted(int i, int i1) {
        MessagerBoxShow("serviceSearchCompleted" + i + "--" + i1);
        if (linster != null && devices.size() > 0) {
            linster.onClickItem(devices.get(listDevice.getSelectedIndex()), services);
            local.getDiscoveryAgent().cancelInquiry(this);
            //findService(devices.get(listDevice.getSelectedIndex()));
        }

    }

    @Override
    public void inquiryCompleted(int i) {

        if (devices.size() <= 0) {
            MessagerBoxShow("no bluetooth print");
        } else {
            MessagerBoxShow("inquiryCompleted" + i);
        }

    }

    private void MessagerBoxShow(String str) {
        JOptionPane.showMessageDialog(null, str);
    }

    private String getDeviceStr(RemoteDevice btDevice) {
        return getFriendlyName(btDevice) + " ---- 0x"
                + btDevice.getBluetoothAddress();
    }

    private String getFriendlyName(RemoteDevice btDevice) {
        try {
            return btDevice.getFriendlyName(false);
        } catch (IOException e) {
            return "no name available";
        }
    }

    private void findService(RemoteDevice device) {
        try {
            UUID[] uuids = new UUID[1];
            uuids[0] = new UUID(0x1101);    //The UUID of the each service

            local.getDiscoveryAgent().searchServices(null, uuids, device, this);
            MessagerBoxShow("Starting Service Discovery...");
        } catch (Exception e) {
            MessagerBoxShow("Error finding services.");
        }

    }

}
